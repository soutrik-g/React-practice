{"ast":null,"code":"var _jsxFileName = \"/home/soutrik/react_projects/meme_generator/src/components/Meme.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport memesData from \"../memesData.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Meme() {\n  _s();\n\n  const [meme, setMeme] = React.useState({\n    topText: \"\",\n    bottomText: \"\",\n    randomImage: \"http://i.imgflip.com/1bij.jpg\"\n  });\n  const [allMemes, setAllMemes] = React.useState(memesData);\n  React.useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\").then(res => res.json()).then(data => setAllMemes(data.data.memes));\n  }, []);\n  console.log(allMemes);\n\n  function getMemeImage() {\n    const memesArray = allMemeImages.data.memes;\n    const randomNumber = Math.floor(Math.random() * memesArray.length);\n    const url = memesArray[randomNumber].url;\n    setMeme(prevMeme => ({ ...prevMeme,\n      randomImage: url\n    }));\n  }\n\n  function handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setMeme(prevMeme => ({ ...prevMeme,\n      [name]: value\n    }));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Top text\",\n        name: \"topText\",\n        className: \"form--input\",\n        value: meme.topText,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Bottom text\",\n        name: \"bottomText\",\n        className: \"form--input\",\n        value: meme.bottomText,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"form--button\",\n        onClick: getMemeImage,\n        children: \"Get a new meme image \\uD83D\\uDDBC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"meme--text-top\",\n      children: meme.topText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), \"\\\\\", /*#__PURE__*/_jsxDEV(\"img\", {\n      src: meme.randomImage,\n      className: \"meme--image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"meme--text-bottom\",\n      children: meme.bottomText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Meme, \"GppSbAA8ZwY+8t5d4rseudMdpww=\");\n\n_c = Meme;\n\nvar _c;\n\n$RefreshReg$(_c, \"Meme\");","map":{"version":3,"names":["React","memesData","Meme","meme","setMeme","useState","topText","bottomText","randomImage","allMemes","setAllMemes","useEffect","fetch","then","res","json","data","memes","console","log","getMemeImage","memesArray","allMemeImages","randomNumber","Math","floor","random","length","url","prevMeme","handleChange","event","name","value","target"],"sources":["/home/soutrik/react_projects/meme_generator/src/components/Meme.jsx"],"sourcesContent":["import React from \"react\"\nimport memesData from \"../memesData.js\"\n\nexport default function Meme() {\n   \n    const [meme, setMeme] = React.useState({\n        topText: \"\",\n        bottomText: \"\",\n        randomImage: \"http://i.imgflip.com/1bij.jpg\"\n    })\n\n    const [allMemes, setAllMemes] = React.useState(memesData)\n\n    React.useEffect(\n        () =>{\n        fetch(\"https://api.imgflip.com/get_memes\")\n        .then(res=>res.json())\n        .then(data=>setAllMemes(data.data.memes))\n        }, [])\n\n        console.log(allMemes)\n\n    function getMemeImage() {\n        const memesArray = allMemeImages.data.memes\n        const randomNumber = Math.floor(Math.random() * memesArray.length)\n        const url = memesArray[randomNumber].url\n        setMeme(prevMeme => ({...prevMeme, randomImage: url\n        }))\n        \n    }\n\n    function handleChange(event){\n        const {name , value} = event.target\n        setMeme(prevMeme =>({\n            ...prevMeme,\n            [name]: value\n        }))\n    }\n    return (\n        <main>\n            <div className=\"form\">\n                <input \n                    type=\"text\"\n                    placeholder=\"Top text\"\n                    name = \"topText\"\n                    className=\"form--input\"\n                    value={meme.topText}\n                    onChange={handleChange}\n                />\n                <input \n                    type=\"text\"\n                    placeholder=\"Bottom text\"\n                    name=\"bottomText\"\n                    className=\"form--input\"\n                    value={meme.bottomText}\n                    onChange={handleChange}\n                />\n                <button \n                    className=\"form--button\"\n                    onClick={getMemeImage}\n                >\n                    Get a new meme image ðŸ–¼\n                </button>\n            </div>\n            <h2 className=\"meme--text-top\">{meme.topText}</h2>\\\n            <img src={meme.randomImage} className=\"meme--image\"/>\n            <h2 className=\"meme--text-bottom\">{meme.bottomText}</h2>\n        </main>\n    )\n}\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;;AAEA,eAAe,SAASC,IAAT,GAAgB;EAAA;;EAE3B,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,KAAK,CAACK,QAAN,CAAe;IACnCC,OAAO,EAAE,EAD0B;IAEnCC,UAAU,EAAE,EAFuB;IAGnCC,WAAW,EAAE;EAHsB,CAAf,CAAxB;EAMA,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BV,KAAK,CAACK,QAAN,CAAeJ,SAAf,CAAhC;EAEAD,KAAK,CAACW,SAAN,CACI,MAAK;IACLC,KAAK,CAAC,mCAAD,CAAL,CACCC,IADD,CACMC,GAAG,IAAEA,GAAG,CAACC,IAAJ,EADX,EAECF,IAFD,CAEMG,IAAI,IAAEN,WAAW,CAACM,IAAI,CAACA,IAAL,CAAUC,KAAX,CAFvB;EAGC,CALL,EAKO,EALP;EAOIC,OAAO,CAACC,GAAR,CAAYV,QAAZ;;EAEJ,SAASW,YAAT,GAAwB;IACpB,MAAMC,UAAU,GAAGC,aAAa,CAACN,IAAd,CAAmBC,KAAtC;IACA,MAAMM,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,UAAU,CAACM,MAAtC,CAArB;IACA,MAAMC,GAAG,GAAGP,UAAU,CAACE,YAAD,CAAV,CAAyBK,GAArC;IACAxB,OAAO,CAACyB,QAAQ,KAAK,EAAC,GAAGA,QAAJ;MAAcrB,WAAW,EAAEoB;IAA3B,CAAL,CAAT,CAAP;EAGH;;EAED,SAASE,YAAT,CAAsBC,KAAtB,EAA4B;IACxB,MAAM;MAACC,IAAD;MAAQC;IAAR,IAAiBF,KAAK,CAACG,MAA7B;IACA9B,OAAO,CAACyB,QAAQ,KAAI,EAChB,GAAGA,QADa;MAEhB,CAACG,IAAD,GAAQC;IAFQ,CAAJ,CAAT,CAAP;EAIH;;EACD,oBACI;IAAA,wBACI;MAAK,SAAS,EAAC,MAAf;MAAA,wBACI;QACI,IAAI,EAAC,MADT;QAEI,WAAW,EAAC,UAFhB;QAGI,IAAI,EAAG,SAHX;QAII,SAAS,EAAC,aAJd;QAKI,KAAK,EAAE9B,IAAI,CAACG,OALhB;QAMI,QAAQ,EAAEwB;MANd;QAAA;QAAA;QAAA;MAAA,QADJ,eASI;QACI,IAAI,EAAC,MADT;QAEI,WAAW,EAAC,aAFhB;QAGI,IAAI,EAAC,YAHT;QAII,SAAS,EAAC,aAJd;QAKI,KAAK,EAAE3B,IAAI,CAACI,UALhB;QAMI,QAAQ,EAAEuB;MANd;QAAA;QAAA;QAAA;MAAA,QATJ,eAiBI;QACI,SAAS,EAAC,cADd;QAEI,OAAO,EAAEV,YAFb;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAjBJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,eAyBI;MAAI,SAAS,EAAC,gBAAd;MAAA,UAAgCjB,IAAI,CAACG;IAArC;MAAA;MAAA;MAAA;IAAA,QAzBJ,qBA0BI;MAAK,GAAG,EAAEH,IAAI,CAACK,WAAf;MAA4B,SAAS,EAAC;IAAtC;MAAA;MAAA;MAAA;IAAA,QA1BJ,eA2BI;MAAI,SAAS,EAAC,mBAAd;MAAA,UAAmCL,IAAI,CAACI;IAAxC;MAAA;MAAA;MAAA;IAAA,QA3BJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AA+BH;;GAlEuBL,I;;KAAAA,I"},"metadata":{},"sourceType":"module"}